<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 配置自定扫描的包   为了整合springmvc此处use-default-filters=true不应该为false(为false时Component和Service注解都会失效)-->
	<context:component-scan base-package="com.ly.easyui" use-default-filters="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	
	<import resource="shiro.xml"/>
	
	<!-- 配置数据源, 整合其他框架, 事务等. -->
	
	<!-- 
		文件系统下db.properties文件 
	<context:property-placeholder location="file:///etc/db.properties"/>
	-->
	<!-- 
		类路径根目录下db.properties文件
		当在db.properties找不到jdbc.url时就会到默认的配置文件defaultConfiguration中找
	 -->
	<context:property-placeholder 
		properties-ref="defaultConfiguration" location="classpath:/db.properties"/>

	<util:properties id="defaultConfiguration">
		<prop key="jdbc.url">jdbc:${jdbc.protocol}://localhost:3306/easyui?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull</prop>
		<prop key="jdbc.username">root</prop>
		<prop key="jdbc.password">root</prop>
	</util:properties>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 driverClassName、url、username、password -->
		<property name="driverClassName" value="${jdbc.driverclass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
	</bean>


	<!-- Tomcat配置JNDI start (结合spring支持两种配置方式)  -->
	<!-- 1.org.springframework.jndi.JndiObjectFactoryBean 
	<bean id="dataSourceJNDI" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/springmvcDB"/>
	</bean>
	-->
	<!-- 2.jee:jndi-lookup命名空间
	cache="false" proxy-interface="javax.sql.DataSource" lookup-on-startup="false"
	default-ref="dataSource" 找不到jdbc/springmvcDB2时,就用c3p0.ComboPooledDataSource的dataSource
	 -->
	<jee:jndi-lookup id="dataSourceJNDI" resource-ref="true"
	 jndi-name="/jdbc/springmvcDB" default-ref="dataSource"/>
	<!-- Tomcat配置JNDI end  -->
	
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
    	<!-- 多数据源时会有多个dataSource，同时也需要配置多个sqlSessionFactory来对应 -->
        <property name="dataSource" ref="dataSource"></property>  
       	<!-- 
       		sqlSessionFactory会自动扫描该路径下的所有文件并解析 
       		该路径支持多个，可以用,;\t\n进行分割。
       		每一个路径都可以用直接的包路径，或者Ant风格的表达式。
       	-->
        <!--<property name="mapperLocations" value="classpath*:com/ly/**/*Mapper.xml"></property>-->
        <property name="mapperLocations" value="classpath*:com/ly/**/*Mapper.xml"></property>
        <!-- mybatis原始配置 -->
        <property name="configLocation" value="classpath:mybatis.xml" />   
   		<!-- 
   		该属性可以给包中的类注册别名，注册后可以直接使用类名，而不用使用全限定的类名（就是不用包含包名）。
		该属性可以配置多个，可以用,;\t\n进行分割。但是不支持Ant风格的路径。
   		 -->
   		<property name="typeAliasesPackage" value="com.ly.easyui.model,com.ly.easyui.shiro.model"/>
<!--    		<property name="plugins">   -->
<!--             <list>   -->
<!--                 注入拦截器    -->
<!--                 <ref bean="myBatisPageIntercept"/>   -->
<!--                 <ref bean="myBatisJsonIntercept"/>   -->
<!--             </list>   -->
<!--         </property>   -->
    </bean>  
	 
	<!--  
		为了代替手工使用 SqlSessionDaoSupport 或 SqlSessionTemplate 
		编写数据访问对象 (DAO)的代码,MyBatis-Spring 提供了一个动态代理的实现:MapperFactoryBean。
		这个类 可以让你直接注入数据映射器接口到你的 service 层 bean 中。
		当使用映射器时,你仅仅如调 用你的 DAO 一样调用它们就可以了,
		但是你不需要编写任何 DAO 实现的代码,因为 MyBatis-Spring 将会为你创建代理。
    -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
    	<!-- basePackage:接口所在的包（自动扫描） 可以写多个，可以用,;\t\n进行分割或者Ant风格的表达式  -->
        <property name="basePackage" value="com.ly.easyui.**.dao"></property>
        <!-- 
       		 改用sqlSessionFactoryBeanName注入就没有问题(不要使用sqlSessionFactory属性注入，
        	使用sqlSessionFactoryBeanName注入)，因为这时不会立即初始化sqlSessionFactory,
        	传入的只是名字，非bean，所以不会引发提前初始化问题。。(导致context:property-placeholder失效)
	        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>  
        	 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>   
	
	<!-- 事物管理(与sqlSessionFactory的dataSource一致 需要aopalliance.jar) -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="txManager"/>
	<!-- 事物通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!--写操作 
				事物传播级别propagation默认为REQUIRED(当前无事物则新建,有事物则加在原来基础上)
				隔离级别isolation默认为DEFAULT(为数据库默认级别)
			 -->
			 <!-- spring默认只对RuntimeException进行实物回滚 可加rollback-for设置自定义异常回滚 -->
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" read-only="false" isolation="DEFAULT"/>		
			<tx:method name="update*" propagation="REQUIRED" read-only="false" isolation="DEFAULT"/>		
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" isolation="DEFAULT"/>		
			<tx:method name="batch*" propagation="REQUIRED" read-only="false" isolation="DEFAULT"/>		
			
			<!--读操作
				默认为只读read-only="true"
			 -->
			<tx:method name="load*" propagation="SUPPORTS" isolation="DEFAULT" read-only="true"/>		
			<tx:method name="get*" propagation="SUPPORTS" isolation="DEFAULT" read-only="true"/>		
			<tx:method name="find*" propagation="SUPPORTS" isolation="DEFAULT" read-only="true"/>		
			
			<!-- 除上述方法以外的默认值 -->
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>		
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		
		<!-- 事务切入点通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* *..*Service.*(..))" order="2"/>
	
		<!-- 缓存切入点通知
		<aop:advisor advice-ref="cacheAdvice" pointcut="execution(* *..*Service.*(..))" order="0"/>
	 	-->
		<!-- Logger切面 
		<aop:aspect id="loggerAspect" ref="logger" order="1">
			<aop:around method="record" pointcut="(execution(* *..*Service.save*(..))
													or execution(* *..*Service.update*(..))
													or execution(* *..*Service.delete*(..))
													or execution(* *..*Service.batch*(..))
													or execution(* *..*Service.new*(..))
													or execution(* *..*Service.move*(..))
													or execution(* *..*Service.clear*(..))
													or execution(* *..*Service.toggle*(..)))
												 	and !bean(logService)"/>
		</aop:aspect>
		-->
	</aop:config>
	
	
	 
  <!-- FreeMarker视图处理器 -->  
	   <!--
  <bean id="viewResolverFtl" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">    
    <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>    
    <property name="contentType" value="text/html;charset=utf-8"/>    
    <property name="prefix" value="" />    
    <property name="cache" value="false"/>    
    <property name="viewNames">    
        <array>    
            <value>*.ftl</value>    
        </array>    
    </property>    
    <property name="suffix" value=".ftl"/>  
    <property name="order" value="0"/> 优先级，数值越小优先级越高     
  </bean>  
  -->
  <!--
  <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">    
    <property name="templateLoaderPaths">    
        <list>    
            <value>/WEB-INF/ftl/</value> 模板加载路径    
        </list>    
    </property>    
  </bean>  
	 -->
	 
	 
	 
</beans>
